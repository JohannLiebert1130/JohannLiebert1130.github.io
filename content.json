{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"git和github使用教程","slug":"git-and-github-tutorial","date":"2019-02-15T13:31:54.000Z","updated":"2019-03-17T14:30:31.323Z","comments":true,"path":"2019/02/15/git-and-github-tutorial/","link":"","permalink":"http://yoursite.com/2019/02/15/git-and-github-tutorial/","excerpt":"","text":"本篇博客为udacity课程如何使用Git和Github的学习笔记。 Intro本课程分三节： 版本控制的作用，各版本控制系统 学习并使用Git 学习如何使用Github Git是一种版本控制系统。Github则是一个代码共享和合作平台。 版本控制比较两个文件之间的差异手动比较文件差异： 乏味无聊，大文件比较可能要花很久借助计算机： Windows： FC old_file new_file Linux/Mac: diff -u old_file new_file(-u stands for unified format and it will make the output a little easier to read.)版本来自哪里？ 手动保存副本 Dropbox Google Docs Wikipedia思考： 从长远来看，能轻松访问文件的整个历史记录将如何提高编程者的效率？ 误删一些文件内容时可以查看旧文件复原。 项目遇到不可复原的bug时可以从旧版本处重新再做。 重拾项目时可以从旧版本看起，逐步回忆，可以快速上手。 Git为什么要使用GitDropbox或Google Docs等工具确实可以保存各版本，但它们并不是为代码版本控制而设计的： Dropbox和Google Docs都不支持离线保存版本 Google Docs不支持使用自带编辑器 Git允许用户自己提交。自动保存更改虽然看起来很方便，但是手动提交更可能使每个版本代表一个逻辑更改。在Git术语中，这些由用户创建的提交成为commits，每个commit代表一个时间点的版本 如何使用Git克隆版本库要克隆版本库，请运行 git clone（后跟空格和版本库 URL） 创建和修改代码库（Repository）初始化打开命令行，在你的项目根目录下输入git init文件状态 将文件添加到暂存区g：it add file_name将当前目录所有文件添加到暂存区：git add .如果你意外地将某个文件添加到暂存区中，可以使用 git reset 删除它。例如，如果你意外地添加了 lesson_2_reflections.txt，但不想提交它，请运行 git reset lesson_2_reflections.txt，此命令会从暂存区中删除该文件，但它仍在你的工作目录中。 将暂存区中的内容提交到代码库中：git commit -m “the commit message you want to tell” (提交信息的风格)虽然提交信息的风格因人而异，但此风格指南https://udacity.github.io/git-styleguide/介绍了在编写提交信息时的一些常见最佳做法。 为每项合逻辑的更改进行一次提交提交频率由于可以选择何时进行提交，因此，你可能想知道该多久提交一次更改。保持较小的提交通常是一个好做法。随着两个版本之间的差异越来越大，易于理解性和实用性都会越来越低。但是，你也不希望使提交过小。如果总是在每次更改一行代码后保存提交，则历史记录会因短时间内包含大量提交而变得难以读懂。为每项逻辑更改进行一次提交是很好的经验法则。例如，如果改正了一处打字错误，然后在文件的另一部分中改正了一个错误，则应为每项更改进行一次提交，因为这两项更改在逻辑上是独立的。如果这样做，每次提交都将具有一个易于理解的目的。Git 允许你在每次提交时都编写一条简短的信息来说明更改了什么。如果每次提交都包含一项逻辑更改，这条信息会更有用。提交大小练习在下一个练习中，你要思考隔多久提交一次，并标明你是否认为以下是合适的提交大小。如果不是，则指出你是否认为此提交过小并想等到以后再提交，或者你是否认为它过大并想更早地提交。这是主观判断题，因此并没有任何明确的正确或错误答案，但在每种情况下请选出你认为最好的答案。 你已经花了一周来开发一项新功能，现在，你提交添加这项新功能所需的所有更改。从你开始开发它以来，你一直没有进行提交。 你在 README 中发现了三处打字错误。你改正并提交第一处错误。 你已经花了一小时来开发一项新功能，现在，你提交添加这项新功能所需的所有更改。 你改正了不同函数中的两个小错误，然后同时提交两者。 操纵提交历史查看提交历史：git log每个commit都有一个ID要停止查看 git log 的输出，请按 q（表示退出）。 比较两个commit的repo差异：git diff commitID1 commitID2 比较working directory中的文件和staging area中文件的差异git diff 比较staging area和最新commit中文件的差异git diff staged 检出代码的旧版本git checkout id在Git中检出commit是指讲所有文件重置到进行该commit时的状态使用时机：当出现了bug，但不知道时哪个commit造成的 回到最新版本：git checkout master 创建分支如果想尝试一种实验性的功能（不确定是否可行)，试试分支 当你与他人合作时，也可以使用分支，使项目保持条理。如果你与合作者都在同一分支上进行更改，你们就无法轻松地同时创建不同的功能。共同开发一个项目的常见工作流程：为每个功能或修复bug创建新的分支。这样，当多个人同时进行更改时，他们每个人都可以在之后检出他们的分支继续工作，不用担心某些内容出现变化。之后，当完成一项功能或修复bug后，相关作者可以更新master分支使其指向新分支的顶点。或者，如果master分支在此期间也出现了更改，可以使用git merge将自己的分支与master分支合并 查看已有分支git branch 创建分支git branch xxx 进入指定分支分支左边的*表示这是当前检出的分支。git checkout xxx 合并分支如果想将 branch2 合并到 branch1 中，只需键入 git checkout branch1，然后键入 git merge branch2 即可。键入 git merge branch1 branch2 的唯一原因是，它能帮助你对要合并的分支更加心中有数。 另外，由于是合并两个分支，因此在命令行中按何顺序键入分支并不重要。关键是要记住，git merge 始终将所有指定的分支合并到当前检出的分支中，并为该分支新建一个提交。 如果想将 branch2 合并到 branch1 中，只需键入 git checkout branch1，然后键入 git merge branch2 即可。键入 git merge branch1 branch2 的唯一原因是，它能帮助你对要合并的分支更加心中有数。 另外，由于是合并两个分支，因此在命令行中按何顺序键入分支并不重要。关键是要记住，git merge 始终将所有指定的分支合并到当前检出的分支中，并为该分支新建一个提交。 合并冲突果收到类似以下所示的消息：123Auto-merging game.jsCONFLICT (content): Merge conflict in game.jsAutomatic merge failed; fix conflicts and then commit the result. 要修复此问题，请完成以下步骤： 运行 git merge –abort，将文件恢复到你开始合并之前的状态 仔细检查文件的状态。如果在检出 master 分支时运行 git log，则应看到 Caroline 的“Add color”提交是第二新的提交，而最新的提交应为你修复 bullet 错误的提交。如果使用 git diff 将你的提交与 Caroline 的提交进行对比，你的提交应在第 424 行引入 this.delayBeforeBullet = 10; 这行代码。应仅使用空格（无制表符）使该行的缩进程度与其下面一行相同，而且该行之后应无空格。 在文件处于正确的状态后，利用你所做的更改新建一个提交。 重新尝试合并。 何时使用分支master branch： your production branchdev branchexp brach 使用Github协作查看所有远程仓库：git remote添加Github上的仓库当做远程仓库：git remote add repo_name(通常命名为origin) URL向远程仓库发送更改： git push repo_name local_branch_nameexample: git push origin master从远程仓库拉取更改：git pull repo_name(通常命名为origin) remote_branch_name 协作引发冲突当遇到上图情况时，在本地使用git pull命令会使commits变为ac5和df6，而b3c丢失了。当这两个仓库中都存在需要包含的更改时，","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-02-03T07:10:22.873Z","updated":"2019-02-03T07:10:22.873Z","comments":true,"path":"2019/02/03/hello-world/","link":"","permalink":"http://yoursite.com/2019/02/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}